apply plugin: 'maven'
apply plugin: 'signing'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.0.0'
        classpath 'org.robolectric:robolectric-gradle-plugin:0.14.+'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'com.android.library'

android {
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }
    compileSdkVersion 23
    buildToolsVersion '23.0.1'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 1
        versionName "1.2.0"
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }

    sourceSets {
        androidTest {
            setRoot('src/test')
        }
    }
}

//robolectric {
//    include '**/*Test.class'
//    exclude '**/espresso/**/*.class'
//}

dependencies {
    repositories {
        mavenCentral()
    }
    // Espresso
    androidTestCompile files('lib/espresso-1.1.jar', 'lib/testrunner-1.1.jar', 'lib/testrunner-runtime-1.1.jar')
    androidTestCompile 'com.google.guava:guava:14.0.1'
    androidTestCompile 'com.squareup.dagger:dagger:1.1.0'
    androidTestCompile 'org.hamcrest:hamcrest-integration:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-core:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.1'

    androidTestCompile('junit:junit:4.11') {
        exclude module: 'hamcrest-core'
    }
    androidTestCompile('org.robolectric:robolectric:2.3') {
        exclude module: 'classworlds'
        exclude module: 'commons-logging'
        exclude module: 'httpclient'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-provider-api'
        exclude group: 'com.android.support', module: 'support-v4'
    }
    androidTestCompile('com.squareup:fest-android:1.0.+') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    androidTestCompile 'org.mockito:mockito-all:1.10.5'
    compile "com.android.support:support-v4:23.0.0"
    compile 'com.google.android.gms:play-services:[3.1,)'

}

apply plugin: 'idea'

idea {
    module {
        testOutputDir = file('build/test-classes/debug')
    }
}

android.libraryVariants.all { variant ->
    task("generate${variant.name}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        exclude '**/R.*', '**/BuildConfig.java'
        options {
            encoding = 'UTF-8'
            docEncoding = 'UTF-8'
            charSet = 'UTF-8'
        }
    }
}
def isReleaseVersion() {
    return !version.endsWith("SNAPSHOT");
}
configurations {
    archives {
        extendsFrom configurations.default
    }
}

if (isReleaseVersion()) {
    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    //basename = artifact_id
    from android.sourceSets.main.java
}
task jarJar(type: Jar) {
    //basename = artifact_id
    from android.sourceSets.main.java
}
uploadArchives {
    configuration = configurations.archives

    repositories.mavenDeployer {
        pom.project {
            name 'liquid-android'
            packaging 'aar'
            artifactId 'liquid-android'
            description 'Liquid Android SDK \n' + 'http://onliquid.com/'
            url 'https://github.com/lqd-io/liquid-sdk-android'
            scm {
                url 'https://github.com/lqd-io/liquid-sdk-android'
                connection 'scm:git:https://github.com/lqd-io/liquid-sdk-android'
                developerConnection 'scm:git:git@github.com:lqd-io/liquid-sdk-android.git'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/license/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'letz'
                    name 'Ricardo LeitÃ£o'
                    email 'rleitao@lqd.io'
                }
            }
        }

        if (isReleaseVersion() && project.hasProperty("NEXUS_USERNAME")) {

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
            }

        } else {
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
            }
        }
    }
}